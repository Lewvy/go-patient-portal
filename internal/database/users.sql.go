// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPatient = `-- name: CreatePatient :one
insert into patients (id, name, age, gender, address, created_at, updated_at)
values($1, $2, $3, $4, $5, $6, $7)
Returning id, name, age, gender, address, created_at, updated_at
`

type CreatePatientParams struct {
	ID        uuid.UUID
	Name      string
	Age       int32
	Gender    string
	Address   sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Address,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStaffMember = `-- name: CreateStaffMember :one
INSERT INTO staff (id, name, role, created_at, updated_at, pw_hash)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, name, role, created_at, updated_at, pw_hash
`

type CreateStaffMemberParams struct {
	ID        uuid.UUID
	Name      string
	Role      string
	CreatedAt time.Time
	UpdatedAt time.Time
	PwHash    string
}

func (q *Queries) CreateStaffMember(ctx context.Context, arg CreateStaffMemberParams) (Staff, error) {
	row := q.db.QueryRowContext(ctx, createStaffMember,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PwHash,
	)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PwHash,
	)
	return i, err
}

const dropRows = `-- name: DropRows :exec
TRUNCATE TABLE staff RESTART IDENTITY CASCADE
`

func (q *Queries) DropRows(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropRows)
	return err
}

const getPatient = `-- name: GetPatient :one
Select id, name, age, gender, address, created_at, updated_at from patients
where name = $1
`

func (q *Queries) GetPatient(ctx context.Context, name string) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, name)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStaffMember = `-- name: GetStaffMember :one
SELECT id, name, role, created_at, updated_at, pw_hash FROM staff 
WHERE name = $1
`

func (q *Queries) GetStaffMember(ctx context.Context, name string) (Staff, error) {
	row := q.db.QueryRowContext(ctx, getStaffMember, name)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PwHash,
	)
	return i, err
}

const getStaffPasswdHash = `-- name: GetStaffPasswdHash :one
SELECT pw_hash from staff where name = $1
`

func (q *Queries) GetStaffPasswdHash(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getStaffPasswdHash, name)
	var pw_hash string
	err := row.Scan(&pw_hash)
	return pw_hash, err
}

const listStaffMembers = `-- name: ListStaffMembers :many
SELECT name FROM staff
`

func (q *Queries) ListStaffMembers(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listStaffMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, role, created_at, updated_at, pw_hash)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, name, role, created_at, updated_at, pw_hash
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	Role      string
	CreatedAt time.Time
	UpdatedAt time.Time
	PwHash    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PwHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PwHash,
	)
	return i, err
}

const dropRows = `-- name: DropRows :exec
TRUNCATE TABLE users RESTART IDENTITY CASCADE
`

func (q *Queries) DropRows(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropRows)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, role, created_at, updated_at, pw_hash FROM users
WHERE name = $1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PwHash,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
